from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
import sqlite3
from kivy.uix.label import Label
from kivy.graphics import Color, Rectangle
from kivy.metrics import dp
from kivy.uix.popup import Popup
from kivy.uix.gridlayout import GridLayout
from kivy.uix.carousel import Carousel
from openai import OpenAI
import time
from kivy.core.window import Window
from kivy.uix.image import Image

class CustomPopup(Popup):
    def __init__(self, image_source, **kwargs):
        super(CustomPopup, self).__init__(**kwargs)
        self.size_hint = (None, None)
        self.size = (400, 400)
        self.title = "Image"

        # Create a BoxLayout for the pop-up content
        content = BoxLayout(orientation='vertical')

        # Create an Image widget for the enlarged image
        enlarged_image = Image(source=image_source, size_hint=(1, 1), allow_stretch=True)
        content.add_widget(enlarged_image)

        self.content = content

class ChatGpt(BoxLayout):
    def __init__(self, monument_name, **kwargs):
        super(ChatGpt, self).__init__(**kwargs)

        self.orientation = 'vertical'

        self.monument_label = Label(text=monument_name, font_size="30sp", size_hint_y=None, height=dp(100))
        self.add_widget(self.monument_label)

        chat_button = Button(text='Chat with ChatGPT', on_press=self.start_chat, size_hint_y=None, height=dp(50))
        self.add_widget(chat_button)

        self.question_input = TextInput(hint_text='Ask a question', multiline=False, size_hint_y=None, height=dp(50))
        self.add_widget(self.question_input)

        self.chat_output = Label(text='', font_size="20sp", size_hint_y=None, height=dp(300))
        self.add_widget(self.chat_output)

        

    def start_chat(self, instance):
        self.get_gpt_response()

    def get_gpt_response(self):
        monument_name = self.monument_label.text
        questions = [
            f"What is the main attraction or landmark of {monument_name}?",
            f"Tell me about the history of {monument_name}",
            f"Can you describe the architecture of {monument_name}",
            f"Who built {monument_name} and when?",
            f"How tall is {monument_name}"
        ]

        answers = []
        for question in questions:
            answer = self.get_answer(question, monument_name)
            answers.append(answer)
            time.sleep(1)

        formatted_answers = '\n\n'.join(answers)
        self.chat_output.text = formatted_answers

    def get_answer(self, question, monument_name):
        api_key = "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"
        client = OpenAI(api_key=api_key)
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": question}
            ]
        )
        answer = completion.choices[0].message.content
        return answer

class DatabaseHelper:
    def __init__(self):
        self.conn = sqlite3.connect('user_database.db')
        self.cursor = self.conn.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT NOT NULL,
                password TEXT NOT NULL
            )
        ''')
        self.conn.commit()

    def add_user(self, username, password):
        # Check if the username already exists
        self.cursor.execute('SELECT * FROM users WHERE username=?', (username,))
        existing_user = self.cursor.fetchone()

        if existing_user:
            print("Username already exists. Choose a different username.")
        else:
            # Insert the new user
            self.cursor.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
            self.conn.commit()
            print("User added successfully.")

    def verify_user(self, username, password):
        print(username)
        print(password)
        username = username.strip()
        password = password.strip()
        self.cursor.execute('SELECT * FROM users WHERE username=? COLLATE BINARY', (username,))
        existing_user = self.cursor.fetchone()
        print("Existing user:", existing_user)

        if existing_user:
            # Check if the password matches
            self.cursor.execute('SELECT * FROM users WHERE username=? AND password=? COLLATE BINARY', (username, password))
            result = self.cursor.fetchone()
            print("Login result:", result)
            return result is not None
        else:
            return False
        
class MyApp(App):
    def build(self):
        self.db_helper = DatabaseHelper()

        self.layout = BoxLayout(orientation='vertical', spacing=10, padding=10)
        with self.layout.canvas.before:
            Color(0.2, 0.7, 0.5, 0.3)
            self.rect = Rectangle(size=self.layout.size, pos=self.layout.pos)

        self.layout.bind(size=self._update_background, pos=self._update_background)
        welcome_label = Label(text="Welcome", font_size="50sp", size_hint_y=None, height=dp(500))
        self.layout.add_widget(welcome_label)

        self.username_input = TextInput(hint_text='Enter your username', multiline=False, size_hint=(None, None), size=(200, 50), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.layout.add_widget(self.username_input)

        self.password_input = TextInput(hint_text='Enter your password', multiline=False, password=True, size_hint=(None, None), size=(200, 50), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.layout.add_widget(self.password_input)

        login_button = Button(text='Login', on_press=self.login, size_hint=(None, None), size=(200, 50), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.layout.add_widget(login_button)

        signup_button = Button(text='Sign Up', on_press=self.signup, size_hint=(None, None), size=(200, 50), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.layout.add_widget(signup_button)

        clear_button = Button(text='Clear', on_press=self.clear, size_hint=(None, None), size=(50, 50), pos_hint={'center_x': 0.5, 'center_y': 0.5})
        self.layout.add_widget(clear_button)

        return self.layout

    
    def _update_background(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size

    def create_widget(self, instance):
        self.image_files = [
            r"C:/Users/harsh/Downloads/1.jpeg",r"C:/Users/harsh/Downloads/1.jpeg",r"C:/Users/harsh/Downloads/1.jpeg",r"C:/Users/harsh/Downloads/1.jpeg",
            r"C:/Users/harsh/Downloads/1.jpeg"
        ]
        new_layout = self.create_image_layout()
        return new_layout

    def login(self, instance):
        username = self.username_input.text
        password = self.password_input.text

        if self.db_helper.verify_user(username, password):
            self.clear(instance)
            self.create_widget(instance)
            print("Login successful!")
        else:
            print("Login failed. Invalid username or password.")

    def show_enlarged_image(self, instance):
        popup = CustomPopup(image_source=instance.source)
        popup.open()

    def create_image_layout(self):
        image_size = (50, 50)
        self.carousel = Carousel(direction='right', loop=True)

        for i in range(0, len(self.image_files), 12):
            grid_layout = GridLayout(rows=3, spacing=10, size_hint=(1, 1))

            for j in range(12):
                if i + j < len(self.image_files):
                    image_file = self.image_files[i + j]
                    image = Image(source=image_file, size=image_size, allow_stretch=True, keep_ratio=False)
                    image.bind(on_touch_down=self.on_image_click)
                    grid_layout.add_widget(image)

            self.carousel.add_widget(grid_layout)

        nav_layout = BoxLayout(size_hint=(1, 0.1), spacing=10)
        # left_button = Button(text='Left', on_press=self.move_left)
        # right_button = Button(text='Right', on_press=self.move_right)
        # nav_layout.add_widget(left_button)
        # nav_layout.add_widget(right_button)

        center_button = Button(text='Ask question With ChatGPT', size_hint=(1, 0.5), size=(300, 200), pos_hint={'center_x': 0.5, 'y': 0.5}, font_size=20)
        center_button.bind(on_press=self.show_chatgpt_page)  # Bind the button press 
        nav_layout.add_widget(center_button)  # Add the center button to the navigation layout

        google_lens_button = Button(text='Scan your Image', size_hint=(1, 0.5), size=(300, 200), pos_hint={'center_x': 0.5, 'y': 0.5}, font_size=20)
        nav_layout.add_widget(google_lens_button)

        self.layout.add_widget(self.carousel)
        self.layout.add_widget(nav_layout)
        

        return self.layout

    def move_left(self, instance):
        self.carousel.load_previous()

    def move_right(self, instance):
        self.carousel.load_next()

    def on_image_click(self, instance, touch):
        if instance.collide_point(*touch.pos):
            monument_name = instance.source.split('\\')[-1].split('.')[0]
            self.show_chat_page(monument_name)

    def show_chat_page(self, monument_name):
         self.clear(None)
         chat_page = ChatGpt(monument_name)
         self.layout.add_widget(chat_page)

    def show_chatgpt_page(self, instance):
        new_layout1 = BoxLayout(orientation='vertical', spacing=10, padding=dp(10))

        question_layout = BoxLayout(orientation='horizontal', spacing=10, size_hint=(1, None), height=dp(40))

        self.question_input = TextInput(hint_text='Type your question...', multiline=True, size_hint=(1, None), height=dp(30))
        question_layout.add_widget(self.question_input)
        
        send_button1 = Button(text='SendQuestion', on_press=self.send_Question, size_hint=(1, None), height=dp(20))
        question_layout.add_widget(send_button1)
        # Add the question layout to the main layout
        new_layout1.add_widget(question_layout)
        
        # Chat input
        self.chat_input = TextInput(hint_text='Type your Monument name...', multiline=True, size_hint=(1, None), height=dp(30))
        new_layout1.add_widget(self.chat_input)

        # Chat response label
        self.chat_response_label = Label(text='Chat Box', size_hint=(1, None), height=dp(15))
        new_layout1.add_widget(self.chat_response_label)
        self.chat_response = TextInput(text='', readonly=True, multiline=True, size_hint=(1, None), height=dp(100))
        new_layout1.add_widget(self.chat_response)
        send_button = Button(text='Send', on_press=self.send_message, size_hint=(1, 1), height=dp(10))
        new_layout1.add_widget(send_button)

        # link_label = Label(text="[ref=plan_tour]Plan Tour[/ref]", markup=True)
        # link_label.bind(on_ref_press=self.on_link_click)
        # new_layout1.add_widget(link_label)

        # Add the new chatbox layout to the main layout
        self.layout.add_widget(new_layout1)

        return new_layout1
    
    # def on_link_click(self, instance, link_ref):
    #     if link_ref == 'plan_tour':
    #         # Handle the link click, you can call your method here
    #         self.plan_tour_callback()

    # def plan_tour_callback(self):
    #     # Implement your logic here when the link is clicked
    #     print("Plan Tour link clicked!")
        
    def send_Question(self, instance):
        message = self.question_input.text
        self.question_input.text = ''
        
        # Send user message to GPT and get response
        answer = self.get_response(message)

        # Update the chat response text box
        self.chat_response.text = answer
        
    def get_response(self, question):
        answer = self.get_answer(question,"none")
        return answer
        
    def send_message(self, instance):
        message = self.chat_input.text
        self.chat_input.text = ''
        
        # Send user message to GPT and get response
        response = self.get_gpt_response(message)

        # Update the chat response text box
        self.chat_response.text = response

    def get_gpt_response(self, monument_name):
        questions = [
            f"What is the main attraction or landmark of {monument_name}?",
            #f"Tell me about the history of {monument_name}",
            # f"Can you describe the architecture of{monument_name}",
            # f"Who built{monument_name} and when?",
            # f"How tall is {monument_name}"
        ]
        limit="Give all answer in less than 50 words"
        answer_default= self.get_answer(limit,"None")
        for question in questions:
            # Get relevant information based on the generated question
            answer = self.get_answer(question, monument_name)
            time.sleep(1)
            #answer+="/n"
            #self.display_message("Question :", tag="bot")
            #self.display_message(question, tag="bot")
            #self.display_message("Answer :", tag="bot")
            # Display bot's response in the chat history
            #self.display_message(answer, tag="bot")
        return answer

    def get_answer(self, question, monument_name):
        if len(monument_name) > 0:
            api_key = ""
            client = OpenAI(api_key=api_key)
            model_engine = 'gpt-3.5-turbo'
            completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                
                {"role": "user", "content": question}
            ]
            )
            read=completion.choices[0].message.content
            return read
        else:
            return "NA"
        
    # Clear existing widgets
        self.clear(None)

    # Add ChatGpt page
        chat_page = ChatGpt("Selected Monument Name")  # You can replace "Selected Monument Name" with the actual monument name
        self.layout.add_widget(chat_page)

    def clear(self, instance):
        self.layout.clear_widgets()

    def signup(self, instance):
        username = self.username_input.text
        password = self.password_input.text

        if username and password:
            self.db_helper.add_user(username, password)
            print("Sign-up successful!")
        else:
            print("Please enter both username and password.")

if __name__ == '__main__':
    MyApp().run()
